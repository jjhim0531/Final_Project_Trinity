<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="boardCommonMapper">
	<resultMap id="commentResultMap" type="Comment">
    <id property="commentNo" column="COMMENT_NO"/>
    <result property="userNo" column="USER_NO"/>
    <result property="commentContent" column="COMMENT_CONTENT"/>
    <result property="createDate" column="ENROLL_DATE"/>
    <result property="likeCount" column="LIKE_COUNT"/>
    <result property="dislikeCount" column="DISLIKE_COUNT"/>
    <result property="refNo" column="REF_NO"/>
    <result property="boardType" column="BOARD_TYPE"/>
</resultMap>


	<select id="selectAllCategories"
		resultType="com.project.trinity.board.common.model.vo.BoardCategory">
		SELECT category_id AS categoryId, category_name AS
		categoryName, sort_order
		AS sortOrder, is_active AS isActive
		FROM
		board_category
		WHERE is_active = 'Y'
		ORDER BY sort_order
	</select>

	<!-- 댓글 목록 조회 -->
	<select id="selectComments" resultType="Comment">
    WITH LIKE_COUNTS AS (
        SELECT
            COMMENT_NO,
            COUNT(*) AS LIKE_COUNT
        FROM
            LIKES_TABLE
        WHERE
            IS_LIKED = 1
        GROUP BY
            COMMENT_NO
    ),
    DISLIKE_COUNTS AS (
        SELECT
            COMMENT_NO,
            COUNT(*) AS DISLIKE_COUNT
        FROM
            LIKES_TABLE
        WHERE
            IS_LIKED = 0
        GROUP BY
            COMMENT_NO
    )
    SELECT
        C.COMMENT_NO AS commentNo,
        C.REF_NO AS refBno,                   <!-- REF_NO로 변경 -->
        C.USER_NO AS userNo,
        M.USER_ID AS commentWriter,
        C.COMMENT_CONTENT AS commentContent, <!-- CONTENT → COMMENT_CONTENT -->
        TO_CHAR(C.ENROLL_DATE, 'YYYY/MM/DD') AS createDate,
        NVL(L.LIKE_COUNT, 0) AS likeCount,
        NVL(D.DISLIKE_COUNT, 0) AS dislikeCount
    FROM
        COMMENTS C
        JOIN MEMBER M ON C.USER_NO = M.USER_NO
        LEFT JOIN LIKE_COUNTS L ON C.COMMENT_NO = L.COMMENT_NO
        LEFT JOIN DISLIKE_COUNTS D ON C.COMMENT_NO = D.COMMENT_NO
    WHERE
        C.REF_NO = #{bno}                     <!-- REF_NO로 게시글 번호 필터 -->
        AND C.BOARD_TYPE = #{boardType}       <!-- BOARD_TYPE으로 게시판 구분 -->
    ORDER BY
        C.ENROLL_DATE DESC
</select>


	<!-- 댓글 추가 -->
<insert id="insertComment" parameterType="Comment">
    INSERT INTO COMMENTS
    (COMMENT_NO, USER_NO, COMMENT_CONTENT, ENROLL_DATE, LIKE_COUNT, DISLIKE_COUNT, REF_NO, BOARD_TYPE)
    VALUES
    (SEQ_COMMENT_NO.NEXTVAL, #{userNo}, #{commentContent}, SYSDATE, 0, 0, #{refNo}, #{boardType})
</insert>





	<!-- 좋아요/싫어요 상태 확인 -->
	<select id="getCurrentLikeState" resultType="Like">
		SELECT
		COMMENT_NO AS
		commentNo,
		USER_NO AS userNo,
		IS_LIKED AS isLike,
		TO_CHAR(ENROLL_DATE,
		'YYYY/MM/DD') AS enrollDate -- 문자열로 변환
		FROM LIKES_TABLE
		WHERE COMMENT_NO
		= #{commentNo} AND USER_NO = #{userNo}
	</select>





	<!-- 좋아요/싫어요 추가 -->
	<insert id="insertLikeDislike" parameterType="map">
		INSERT INTO
		LIKES_TABLE (COMMENT_NO, USER_NO, IS_LIKED, ENROLL_DATE)
		VALUES
		(#{commentNo}, #{userNo}, #{isLike}, SYSDATE)
	</insert>

	<update id="updateLikeDislike">
		UPDATE LIKES_TABLE
		SET IS_LIKED = #{isLike},
		ENROLL_DATE = SYSDATE
		WHERE COMMENT_NO = #{commentNo} AND USER_NO =
		#{userNo}
	</update>

	<!-- 좋아요/싫어요 삭제 -->
	<delete id="deleteLikeDislike" parameterType="map">
		DELETE FROM
		LIKES_TABLE
		WHERE COMMENT_NO = #{commentNo}
		AND USER_NO = #{userNo}
	</delete>

	<!-- 좋아요 개수 -->
	<select id="getLikeCount" resultType="int">
		SELECT COUNT(*)
		FROM
		LIKES_TABLE
		WHERE COMMENT_NO = #{commentNo} AND IS_LIKED = 1
	</select>

	<select id="getDislikeCount" resultType="int">
		SELECT COUNT(*)
		FROM
		LIKES_TABLE
		WHERE COMMENT_NO = #{commentNo} AND IS_LIKED = 0
	</select>


	<update id="updateFileAllowDownload" parameterType="BoardFile">
		UPDATE
		FILE_TABLE
		SET ALLOW_DOWNLOAD = #{allowDownload}
		WHERE FILE_NO =
		#{fileNo}
	</update>

	<delete id="deleteFile" parameterType="String">
		DELETE FROM FILE_TABLE
		WHERE FILE_NO = #{fileNo}
	</delete>

	<delete id="deleteAllFilesByBoardNo" parameterType="String">
		DELETE FROM
		FILE_TABLE
		WHERE COMMUNITY_NO = #{bno}
	</delete>

	<!-- communityMapper.xml -->
	<delete id="deleteCommentsByBoardNo" parameterType="String">
		DELETE FROM
		COMMENTS
		WHERE COMMUNITY_NO = #{bno}
	</delete>

<select id="getFileList" parameterType="map" resultType="BoardFile">
    SELECT
        FILE_NO AS fileNo,
        REF_NO AS refNo,                 <!-- REF_NO로 변경 -->
        USER_NO AS userNo,
        ORIGIN_NAME AS originName,
        CHANGE_NAME AS changeName,
        ALLOW_DOWNLOAD AS allowDownload,
        FILE_SIZE AS fileSize
    FROM
        FILE_TABLE
    WHERE
        REF_NO = #{bno}                  <!-- REF_NO로 변경 -->
        AND BOARD_TYPE = #{boardType}    <!-- BOARD_TYPE을 파라미터로 -->
</select>



	<select id="getSingleFile" parameterType="String"
		resultType="BoardFile">
		SELECT
		FILE_NO AS fileNo,
		COMMUNITY_NO AS communityNo,
		USER_NO AS
		userNo,
		ORIGIN_NAME AS originName,
		CHANGE_NAME AS changeName,
		ALLOW_DOWNLOAD AS allowDownload,
		File_Size AS fileSize
		FROM
		FILE_TABLE
		WHERE
		FILE_NO = #{fileNo}
	</select>

	<update id="updateAllowDownload" parameterType="map">
		UPDATE FILE_TABLE
		SET ALLOW_DOWNLOAD = #{allowDownload}
		WHERE COMMUNITY_NO =
		#{communityNo}
	</update>

	<!-- 게시글에 첨부된 파일들 조회 -->
	<select id="getFilesForBoard" parameterType="String"
		resultType="BoardFile">
		SELECT
		FILE_NO AS fileNo,
		COMMUNITY_NO AS communityNo,
		USER_NO AS
		userNo,
		ORIGIN_NAME AS originName,
		CHANGE_NAME AS changeName,
		ALLOW_DOWNLOAD AS allowDownload,
		FILE_SIZE AS fileSize
		FROM FILE_TABLE
		WHERE COMMUNITY_NO = #{bno}
	</select>


	<delete id="deleteReply">
		DELETE FROM COMMENTS
		WHERE COMMENT_NO = #{replyNo}
	</delete>
	<!-- 좋아요 관련 SQL 시작 -->
	<!-- 좋아요 추가 -->
	<insert id="insertLike" parameterType="map">
		INSERT INTO LIKES_TABLE (
		COMMENT_NO,
		USER_NO,
		ENROLL_DATE
		) VALUES (
		#{commentNo},        <!-- 댓글 번호 (insertReply에서 반환된 값) -->
		#{userNo},           <!-- 좋아요 작성자 번호 -->
		SYSDATE              <!-- 등록 날짜 -->
		)
	</insert>


	<!-- 좋아요 취소 -->
	<delete id="deleteLike" parameterType="map">
		DELETE FROM LIKES_TABLE
		WHERE COMMENT_NO = #{commentNo} AND USER_NO = #{userNo}
	</delete>

	<!-- 좋아요 상태 확인 -->
	<select id="checkLike" parameterType="map" resultType="int">
		SELECT
		COUNT(*)
		FROM LIKES_TABLE
		WHERE COMMENT_NO = #{commentNo} AND USER_NO =
		#{userNo}
	</select>
</mapper>