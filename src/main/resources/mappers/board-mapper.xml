<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="boardMapper">

    <!-- 게시글 ResultMap 정의 -->
    <resultMap id="boardResult" type="Board">
        <!-- 게시글 정보 -->
        <id property="boardNo" column="BOARD_NO" />
        <result property="boardType" column="BOARD_TYPE" />
        <result property="boardTitle" column="BOARD_TITLE" />
        <result property="userNo" column="USER_NO" />
        <result property="boardWriter" column="BOARD_WRITER" />
        <result property="boardContent" column="BOARD_CONTENT" />
        <result property="enrollDate" column="ENROLL_DATE" />
        <result property="modifiedDate" column="MODIFIED_DATE" />
        <result property="boardViews" column="BOARD_VIEWS" />
        <result property="boardCategory" column="BOARD_CATEGORY" />
        <result property="status" column="STATUS" />

        <!-- 첨부파일 정보 -->
        <collection property="attachedFiles" ofType="BoardFile">
            <id property="fileNo" column="FILE_NO" />
            <result property="originName" column="ORIGIN_NAME" />
            <result property="changeName" column="CHANGE_NAME" />
            <result property="allowDownload" column="ALLOW_DOWNLOAD" />
            <result property="fileSize" column="FILE_SIZE" />
        </collection>
    </resultMap>

    <!-- 게시글 총 갯수 조회 -->
    <select id="selectListCount" resultType="int">
        SELECT COUNT(*) FROM BOARD
    </select>

    <!-- 게시글 리스트 조회 -->
    <select id="selectList" resultType="Board">
        SELECT 
            B.BOARD_NO AS boardNo,
            B.BOARD_CATEGORY AS boardCategory,
            B.BOARD_TITLE AS boardTitle,
            M.USER_ID AS boardWriter,
            TO_CHAR(B.ENROLL_DATE, 'YYYY-MM-DD') AS enrollDate,
            B.BOARD_VIEWS AS boardViews
        FROM BOARD B
        JOIN MEMBER M ON B.USER_NO = M.USER_NO
        <choose>
            <when test="sortType == '조회수'">
                ORDER BY B.BOARD_VIEWS DESC
            </when>
            <when test="sortType == '작성일'">
                ORDER BY B.ENROLL_DATE DESC
            </when>
            <otherwise>
                ORDER BY B.BOARD_NO DESC
            </otherwise>
        </choose>
    </select>

    <!-- 게시글 조회수 증가 -->
    <update id="increaseCount">
        UPDATE BOARD
        SET BOARD_VIEWS = TO_NUMBER(BOARD_VIEWS) + 1
        WHERE BOARD_NO = #{boardNo}
    </update>

    <!-- 게시글 추가 -->
    <insert id="insertBoard" parameterType="Board">
        INSERT INTO BOARD (
            USER_NO, BOARD_TITLE, BOARD_CONTENT, BOARD_CATEGORY
        ) VALUES (
            #{userNo}, #{boardTitle}, #{boardContent}, #{boardCategory}
        )
    </insert>

    <!-- 첨부파일 저장 -->
    <insert id="insertFile" parameterType="BoardFile">
        INSERT INTO FILE_TABLE (
            FILE_NO, BOARD_NO, USER_NO, ORIGIN_NAME, CHANGE_NAME, ALLOW_DOWNLOAD, FILE_SIZE
        ) VALUES (
            SEQ_FILE_NO.NEXTVAL, #{boardNo}, #{userNo}, #{originName}, #{changeName},
            CASE WHEN #{allowDownload} IS NULL THEN 'Y' ELSE #{allowDownload} END, #{fileSize}
        )
    </insert>

    <!-- 첨부파일 목록 조회 -->
    <select id="getFilesList" parameterType="String" resultType="BoardFile">
        SELECT 
            FILE_NO AS fileNo,
            BOARD_NO AS boardNo,
            USER_NO AS userNo,
            ORIGIN_NAME AS originName,
            CHANGE_NAME AS changeName,
            ALLOW_DOWNLOAD AS allowDownload,
            FILE_SIZE AS fileSize
        FROM FILE_TABLE
        WHERE BOARD_NO = #{boardNo}
    </select>


    <!-- 특정 첨부파일 조회 -->
    <select id="getSingleFile" parameterType="String" resultType="BoardFile">
        SELECT 
            FILE_NO AS fileNo,
            BOARD_NO AS boardNo,
            USER_NO AS userNo,
            ORIGIN_NAME AS originName,
            CHANGE_NAME AS changeName,
            ALLOW_DOWNLOAD AS allowDownload,
            FILE_SIZE AS fileSize
        FROM FILE_TABLE
        WHERE FILE_NO = #{fileNo}
    </select>

    <!-- 첨부파일 삭제 -->
    <delete id="deleteFile" parameterType="String">
        DELETE FROM FILE_TABLE WHERE FILE_NO = #{fileNo}
    </delete>

    <!-- 게시글 상세 조회 -->
    <select id="selectBoard" resultMap="boardResult">
        SELECT 
            B.BOARD_NO, B.BOARD_TYPE, B.BOARD_TITLE, B.USER_NO, 
            M.USER_ID AS BOARD_WRITER, B.BOARD_CONTENT,
            TO_CHAR(B.ENROLL_DATE, 'YYYY-MM-DD') AS ENROLL_DATE,
            TO_CHAR(B.MODIFIED_DATE, 'YYYY-MM-DD') AS MODIFIED_DATE,
            B.BOARD_VIEWS, B.BOARD_CATEGORY, B.STATUS,
            F.FILE_NO, F.ORIGIN_NAME, F.CHANGE_NAME, F.ALLOW_DOWNLOAD, F.FILE_SIZE
        FROM BOARD B
        JOIN MEMBER M ON B.USER_NO = M.USER_NO
        LEFT JOIN FILE_TABLE F ON B.BOARD_NO = F.BOARD_NO
        WHERE B.STATUS = 'Y' AND B.BOARD_NO = #{boardNo}
    </select>

    <!-- 댓글 목록 조회 -->
    <select id="selectReply" resultType="Comment">
        WITH LIKE_COUNTS AS (
            SELECT 
                COMMENT_NO, 
                COUNT(*) AS LIKE_COUNT
            FROM LIKES_TABLE
            WHERE IS_LIKE = 1
            GROUP BY COMMENT_NO
        ),
        DISLIKE_COUNTS AS (
            SELECT 
                COMMENT_NO, 
                COUNT(*) AS DISLIKE_COUNT
            FROM LIKES_TABLE
            WHERE IS_LIKE = 0
            GROUP BY COMMENT_NO
        )
        SELECT 
            C.COMMENT_NO AS commentNo,
            C.BOARD_NO AS refBno,
            C.USER_NO AS userNo,
            M.USER_ID AS commentWriter,
            C.CONTENT AS commentContent,
            TO_CHAR(C.CREATED_AT, 'YYYY-MM-DD HH24:MI') AS createDate,
            NVL(L.LIKE_COUNT, 0) AS likeCount,
            NVL(D.DISLIKE_COUNT, 0) AS dislikeCount
        FROM COMMENTS C
        JOIN MEMBER M ON C.USER_NO = M.USER_NO
        LEFT JOIN LIKE_COUNTS L ON C.COMMENT_NO = L.COMMENT_NO
        LEFT JOIN DISLIKE_COUNTS D ON C.COMMENT_NO = D.COMMENT_NO
        WHERE C.BOARD_NO = #{bno}
        ORDER BY C.CREATED_AT DESC
    </select>

    <!-- 댓글 추가 -->
    <insert id="insertReply" parameterType="Comment">
        INSERT INTO COMMENTS (COMMENT_NO, BOARD_NO, USER_NO, CONTENT)
        VALUES (SEQ_COMMENT_NO.NEXTVAL, #{refBno}, #{userNo}, #{commentContent})
    </insert>

<!-- 좋아요/싫어요 상태 확인 -->
<select id="getCurrentLikeState" resultType="Like">
    SELECT COMMENT_NO AS commentNo,
           USER_NO AS userNo,
           IS_LIKE AS isLike,
           TO_CHAR(ENROLL_DATE, 'YYYY-MM-DD HH24:MI:SS') AS enrollDate
    FROM LIKES_TABLE
    WHERE COMMENT_NO = #{commentNo} AND USER_NO = #{userNo}
</select>



<!-- 좋아요/싫어요 추가 -->
<insert id="insertLikeDislike" parameterType="map">
    INSERT INTO LIKES_TABLE (COMMENT_NO, USER_NO, IS_LIKE, ENROLL_DATE)
    VALUES (#{commentNo}, #{userNo}, #{isLike}, SYSDATE)
</insert>
<update id="updateLikeDislike">
    UPDATE LIKES_TABLE
    SET IS_LIKE = #{isLike}, ENROLL_DATE = SYSDATE
    WHERE COMMENT_NO = #{commentNo} AND USER_NO = #{userNo}
</update>

<!-- 좋아요/싫어요 삭제 -->
<delete id="deleteLikeDislike" parameterType="map">
    DELETE FROM LIKES_TABLE
    WHERE COMMENT_NO = #{commentNo}
      AND USER_NO = #{userNo}
</delete>

   <!-- 좋아요 개수 -->
<select id="getLikeCount" resultType="int">
    SELECT COUNT(*)
    FROM LIKES_TABLE
    WHERE COMMENT_NO = #{commentNo} AND IS_LIKE = 1
</select>

<select id="getDislikeCount" resultType="int">
    SELECT COUNT(*)
    FROM LIKES_TABLE
    WHERE COMMENT_NO = #{commentNo} AND IS_LIKE = 0
</select>

<select id="selectRecentPopularList" parameterType="map" resultMap="boardResult">
    SELECT *
    FROM (
        SELECT 
            B.BOARD_NO,
            B.BOARD_TYPE,
            B.BOARD_TITLE,
            B.USER_NO,
            M.USER_ID AS BOARD_WRITER,
            B.BOARD_CONTENT,
            TO_CHAR(B.ENROLL_DATE, 'YYYY-MM-DD') AS ENROLL_DATE,
            B.MODIFIED_DATE,
            B.BOARD_VIEWS,
            B.BOARD_CATEGORY,
            B.STATUS,
            ROW_NUMBER() OVER (ORDER BY B.BOARD_VIEWS DESC) AS RN
        FROM BOARD B
        LEFT JOIN MEMBER M ON B.USER_NO = M.USER_NO
        WHERE B.STATUS = 'Y'
          AND B.ENROLL_DATE >= SYSDATE - 7
    )
    WHERE RN BETWEEN #{startRow} AND #{endRow}
</select>

</mapper>
