<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="boardMapper">
	<resultMap id="boardResult" type="Board">
		<!-- 게시글 정보 -->
		<id property="boardNo" column="BOARD_NO" />
		<result property="boardType" column="BOARD_TYPE" />
		<result property="boardTitle" column="BOARD_TITLE" />
		<result property="userNo" column="USER_NO" />
		<result property="boardWriter" column="BOARD_WRITER" />
		<result property="boardContent" column="BOARD_CONTENT" />
		<result property="enrollDate" column="ENROLL_DATE" />
		<result property="modifiedDate" column="MODIFIED_DATE" />
		<result property="boardViews" column="BOARD_VIEWS" />
		<result property="boardCategory" column="BOARD_CATEGORY" />
		<result property="status" column="STATUS" />

		<!-- 첨부파일 정보 -->
		<collection property="attachedFiles" ofType="BoardFile">
			<id property="fileNo" column="FILE_NO" />
			<result property="originName" column="ORIGIN_NAME" />
			<result property="changeName" column="CHANGE_NAME" />
			<result property="allowDownload" column="ALLOW_DOWNLOAD" />
			<result property="fileSize" column="FILE_SIZE" />
		</collection>
	</resultMap>



	<!-- 게시글 총 갯수 조회 -->
	<select id="selectListCount" resultType="int">
		SELECT COUNT(*) FROM
		BOARD
	</select>

	<!-- 게시글 리스트 조회 -->
	<select id="selectList" resultType="Board">
		SELECT BOARD_NO AS boardNo,
		BOARD_CATEGORY AS boardCategory,
		BOARD_TITLE AS
		boardTitle,
		USER_ID AS boardWriter,
		TO_CHAR(ENROLL_DATE,
		'YYYY-MM-DD HH24:MI:SS')
		AS enrollDate,
		BOARD_VIEWS AS boardViews
		FROM
		BOARD
		<choose>
			<when test="sortType == '조회수'">
				ORDER BY BOARD_VIEWS DESC
			</when>
			<when test="sortType == '작성일'">
				ORDER BY ENROLL_DATE DESC
			</when>
			<otherwise>
				ORDER BY BOARD_NO DESC
			</otherwise>
		</choose>
	</select>


	<!-- 게시글 조회수 증가 -->
	<update id="increaseCount">
		UPDATE BOARD
		SET BOARD_VIEWS = 'BV' ||
		LPAD(TO_NUMBER(SUBSTR(BOARD_VIEWS, 3)) + 1, 5,
		'0')
		WHERE BOARD_NO =
		#{boardNo}
	</update>



	<!-- 게시글 추가 -->

	<insert id="insertBoard" parameterType="Board">
		INSERT INTO BOARD (
		USER_NO,
		BOARD_TITLE,
		BOARD_CONTENT,
		BOARD_CATEGORY
		)
		VALUES (
		#{userNo},
		#{boardTitle},
		#{boardContent},
		#{boardCategory}
		)
		<selectKey keyProperty="boardNo"
			resultType="java.lang.String" order="AFTER">
			select 'B' ||
			SEQ_BOARD_NO.CURRVAL FROM DUAL
		</selectKey>
	</insert>


	<!-- 첨부파일 저장 -->
	<insert id="insertFile" parameterType="BoardFile">
		INSERT INTO FILE_TABLE (
		FILE_NO,
		BOARD_NO,
		USER_NO,
		ORIGIN_NAME,
		CHANGE_NAME,
		ALLOW_DOWNLOAD,
		File_Size
		) VALUES (
		SEQ_FILE_NO.NEXTVAL,
		#{boardNo},
		#{userNo},
		#{originName},
		#{changeName},
		CASE WHEN #{allowDownload} IS NULL THEN
		'Y' ELSE #{allowDownload} END,
		#{fileSize}
		)
	</insert>

	<update id="updateFileAllowDownload" parameterType="BoardFile">
		UPDATE
		FILE_TABLE
		SET ALLOW_DOWNLOAD = #{allowDownload}
		WHERE FILE_NO =
		#{fileNo}
	</update>

	<delete id="deleteFile" parameterType="String">
		DELETE FROM FILE_TABLE
		WHERE FILE_NO = #{fileNo}
	</delete>

	<select id="getFilesList" parameterType="String"
		resultType="BoardFile">
		SELECT
		FILE_NO AS fileNo,
		BOARD_NO AS boardNo,
		USER_NO AS
		userNo,
		ORIGIN_NAME AS originName,
		CHANGE_NAME AS changeName,
		ALLOW_DOWNLOAD AS allowDownload,
		File_Size AS fileSize
		FROM
		FILE_TABLE
		WHERE
		BOARD_NO = #{boardNo}
	</select>

	<select id="getSingleFile" parameterType="String"
		resultType="BoardFile">
		SELECT
		FILE_NO AS fileNo,
		BOARD_NO AS boardNo,
		USER_NO AS
		userNo,
		ORIGIN_NAME AS originName,
		CHANGE_NAME AS changeName,
		ALLOW_DOWNLOAD AS allowDownload,
		File_Size AS fileSize
		FROM
		FILE_TABLE
		WHERE
		FILE_NO = #{fileNo}
	</select>

	<update id="updateAllowDownload" parameterType="map">
		UPDATE FILE_TABLE
		SET ALLOW_DOWNLOAD = #{allowDownload}
		WHERE BOARD_NO = #{BOARD_NO}
	</update>



	<!-- bno로 게시글 + 첨부파일 정보 조회 -->
	<select id="selectBoard" resultMap="boardResult">
		SELECT
		B.BOARD_NO,
		B.BOARD_TYPE,
		B.BOARD_TITLE,
		B.USER_NO,
		M.USER_ID AS BOARD_WRITER, 
		<!-- 작성자의 ID -->
		B.BOARD_CONTENT,
		TO_CHAR(B.ENROLL_DATE, 'YYYY-MM-DD') AS
		ENROLL_DATE,
		TO_CHAR(B.MODIFIED_DATE, 'YYYY-MM-DD') AS MODIFIED_DATE,
		B.BOARD_VIEWS,
		B.BOARD_CATEGORY,
		B.STATUS,
		
		<!-- 첨부파일 정보-->
		F.FILE_NO,
		F.ORIGIN_NAME,
		F.CHANGE_NAME,
		F.ALLOW_DOWNLOAD,
		F.FILE_SIZE
		FROM
		BOARD B
		JOIN
		MEMBER M ON B.USER_NO = M.USER_NO
		LEFT JOIN
		FILE_TABLE F
		ON B.BOARD_NO = F.BOARD_NO -- 첨부파일 조인
		WHERE
		B.STATUS = 'Y'
		AND
		B.BOARD_NO
		= #{boardNo}
	</select>


	<update id="updateBoard" parameterType="Board">
		UPDATE BOARD
		SET
		BOARD_CATEGORY = #{boardCategory},
		BOARD_TITLE = #{boardTitle},
		BOARD_CONTENT = #{boardContent},
		MODIFIED_DATE = SYSDATE
		WHERE BOARD_NO
		= #{boardNo}
	</update>

	<select id="selectPopularList" resultMap="boardResult"
		parameterType="map">
		SELECT *
		FROM (
		SELECT a.*, ROWNUM AS row_number
		FROM (
		SELECT
		BOARD_NO,
		BOARD_TITLE,
		USER_NO,
		(SELECT USER_ID FROM MEMBER WHERE
		USER_NO = BOARD.USER_NO) AS BOARD_WRITER,
		BOARD_CONTENT,
		TO_CHAR(ENROLL_DATE, 'YYYY-MM-DD') AS ENROLL_DATE,
		BOARD_VIEWS,
		BOARD_CATEGORY
		FROM BOARD
		WHERE STATUS = 'Y'
		ORDER BY
		TO_NUMBER(BOARD_VIEWS) DESC
		) a
		WHERE ROWNUM &lt;= #{endRow}
		)
		WHERE
		row_number &gt;= #{startRow}
	</select>

	<!-- 댓글목록 가져오기 -->
	<select id="selectReply" resultType="Reply">
    SELECT
        c.COMMENT_NO,
        c.BOARD_NO AS refBno,
        c.USER_NO,
        m.USER_ID AS replyWriter,
        c.CONTENT AS replyContent,
        TO_CHAR(c.CREATED_AT, 'YYYY-MM-DD HH24:MI') AS createDate,
        NVL(l.COUNT, 0) AS likeCount
    FROM COMMENTS c
    LEFT JOIN MEMBER m ON c.USER_NO = m.USER_NO
    LEFT JOIN (
        SELECT COMMENT_NO, COUNT(*) AS COUNT
        FROM LIKES_TABLE
        GROUP BY COMMENT_NO
    ) l ON c.COMMENT_NO = l.COMMENT_NO
    WHERE c.BOARD_NO = #{bno}
    ORDER BY c.CREATED_AT DESC
</select>


	
	<!-- 댓글 추가 -->
	<insert id="insertReply">
	    INSERT INTO COMMENTS (
	        COMMENT_NO,
	        BOARD_NO,
	        USER_NO,
	        CONTENT
	    )
	    VALUES (
	        SEQ_COMMENT_NO.NEXTVAL, <!-- 댓글 번호 시퀀스 -->
	        #{refBno},              <!-- 게시글 번호 -->
	        #{userNo},              <!-- 작성자 번호 -->
	        #{replyContent}         <!-- 댓글 내용 -->
	    )
	</insert>


	<select id="selectTopBoardList" resultMap="boardResult">
	    SELECT *
	    FROM (
	        SELECT 
	            BOARD_NO,
	            BOARD_TITLE,
	            BOARD_WRITER,
	            ORIGIN_NAME,
	            COUNT AS viewCount, <!-- 조회수 -->
	            TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') AS createDate
	        FROM BOARD
	        WHERE STATUS = 'Y'
	        ORDER BY COUNT DESC
	    )
	    WHERE ROWNUM BETWEEN 1 AND 5
	</select>
	
<update id="updateLikeCount">
    UPDATE COMMENTS
    SET LIKE_COUNT = LIKE_COUNT + 1
    WHERE COMMENT_NO = #{commentNo}
</update>

	<delete id="deleteReply">
    DELETE FROM COMMENTS
    WHERE COMMENT_NO = #{replyNo}
</delete>

</mapper>                                                                        
	                                                                                                                                                                                                                                                              