<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="boardMapper">

	<!-- 게시글 ResultMap 정의 -->
	<resultMap id="boardResult" type="Board">
		<!-- 게시글 정보 -->
		<id property="boardNo" column="BOARD_NO" />
		<result property="boardType" column="BOARD_TYPE" />
		<result property="boardTitle" column="BOARD_TITLE" />
		<result property="userNo" column="USER_NO" />
		<result property="boardWriter" column="BOARD_WRITER" />
		<result property="boardContent" column="BOARD_CONTENT" />
		<result property="enrollDate" column="ENROLL_DATE" />
		<result property="modifiedDate" column="MODIFIED_DATE" />
		<result property="boardViews" column="BOARD_VIEWS" />
		<result property="boardCategory" column="BOARD_CATEGORY" />
		<result property="status" column="STATUS" />

		<!-- 첨부파일 정보 -->
		<collection property="attachedFiles" ofType="BoardFile">
			<id property="fileNo" column="FILE_NO" />
			<result property="originName" column="ORIGIN_NAME" />
			<result property="changeName" column="CHANGE_NAME" />
			<result property="allowDownload" column="ALLOW_DOWNLOAD" />
			<result property="fileSize" column="FILE_SIZE" />
		</collection>
	</resultMap>
 <!-- 게시글 관련 쿼리 -->
	<!-- 게시판의 전체 게시글 수를 반환 -->
  <select id="selectListCount" resultType="int">
    SELECT COUNT(*) FROM BOARD
  </select>

	 <!-- 정렬 조건에 따라 게시글 목록 반환 -->
  <select id="selectList" resultType="Board">
    SELECT
      B.BOARD_NO AS boardNo,
      B.BOARD_CATEGORY AS boardCategory,
      B.BOARD_TITLE AS boardTitle,
      M.USER_ID AS boardWriter,
      TO_CHAR(B.ENROLL_DATE, 'YYYY-MM-DD') AS enrollDate,
      B.BOARD_VIEWS AS boardViews
    FROM BOARD B
    JOIN MEMBER M ON B.USER_NO = M.USER_NO
    <choose>
      <!-- 조회수 기준 정렬 -->
      <when test="sortType == '조회수'">
        ORDER BY B.BOARD_VIEWS DESC
      </when>
      <!-- 작성일 기준 정렬 -->
      <when test="sortType == '작성일'">
        ORDER BY B.ENROLL_DATE DESC
      </when>
      <!-- 기본 정렬 (게시글 번호) -->
      <otherwise>
        ORDER BY B.BOARD_NO DESC
      </otherwise>
    </choose>
  </select>


 <!-- 특정 게시글의 조회수를 1 증가 -->
  <update id="increaseCount">
    UPDATE BOARD
    SET BOARD_VIEWS = TO_NUMBER(BOARD_VIEWS) + 1
    WHERE BOARD_NO = #{boardNo}
  </update>


  <!-- 게시글 추가 -->
  <insert id="insertBoard" parameterType="Board">
    INSERT INTO BOARD (
      USER_NO,
      BOARD_TITLE,
      BOARD_CONTENT,
      BOARD_CATEGORY
    )
    VALUES (
      #{userNo},
      #{boardTitle},
      #{boardContent},
      #{boardCategory}
    )
    <selectKey 
      keyProperty="boardNo"
      resultType="java.lang.String"
      order="AFTER">
      SELECT 'B' || SEQ_BOARD_NO.CURRVAL
      FROM DUAL
    </selectKey>
  </insert>


	
 <!-- 게시글과 첨부파일 정보를 함께 반환 -->
  <select id="selectBoard" resultMap="boardResult">
    SELECT
      B.BOARD_NO,
      B.BOARD_TYPE,
      B.BOARD_TITLE,
      B.USER_NO,
      M.USER_ID AS BOARD_WRITER, <!-- 작성자 ID -->
      B.BOARD_CONTENT,
      TO_CHAR(B.ENROLL_DATE, 'YYYY-MM-DD') AS ENROLL_DATE,
      TO_CHAR(B.MODIFIED_DATE, 'YYYY-MM-DD') AS MODIFIED_DATE,
      B.BOARD_VIEWS,
      B.BOARD_CATEGORY,
      B.STATUS,
      F.FILE_NO,
      F.ORIGIN_NAME,
      F.CHANGE_NAME,
      F.ALLOW_DOWNLOAD,
      F.FILE_SIZE
    FROM BOARD B
    JOIN MEMBER M ON B.USER_NO = M.USER_NO
    LEFT JOIN FILE_TABLE F ON B.BOARD_NO = F.BOARD_NO
    WHERE B.STATUS = 'Y'
    AND B.BOARD_NO = #{boardNo}
  </select>
    <!-- 게시글 수정 -->
  <update id="updateBoard" parameterType="Board">
    UPDATE BOARD
    SET
      BOARD_CATEGORY = #{boardCategory},
      BOARD_TITLE = #{boardTitle},
      BOARD_CONTENT = #{boardContent},
      MODIFIED_DATE = SYSDATE
    WHERE 
      BOARD_NO = #{boardNo}
  </update>
  
  <!-- 첨부파일 관련 쿼리 -->

 <!-- 파일 번호로 첨부파일 정보 반환 -->
  <select id="getSingleFile" parameterType="String" resultType="BoardFile">
    SELECT
      FILE_NO AS fileNo,
      BOARD_NO AS boardNo,
      USER_NO AS userNo,
      ORIGIN_NAME AS originName,
      CHANGE_NAME AS changeName,
      ALLOW_DOWNLOAD AS allowDownload,
      FILE_SIZE AS fileSize
    FROM FILE_TABLE
    WHERE FILE_NO = #{fileNo}
  </select>
<!-- 첨부파일 저장 -->
  <insert id="insertFile" parameterType="BoardFile">
    INSERT INTO FILE_TABLE (
      FILE_NO,
      BOARD_NO,
      USER_NO,
      ORIGIN_NAME,
      CHANGE_NAME,
      ALLOW_DOWNLOAD,
      FILE_SIZE
    )
    VALUES (
      SEQ_FILE_NO.NEXTVAL,
      #{boardNo},
      #{userNo},
      #{originName},
      #{changeName},
      CASE 
        WHEN #{allowDownload} IS NULL THEN 'Y' 
        ELSE #{allowDownload} 
      END,
      #{fileSize}
    )
  </insert>

  <!-- 첨부파일 다운로드 허용 여부 업데이트 -->
  <update id="updateFileAllowDownload" parameterType="BoardFile">
    UPDATE FILE_TABLE
    SET 
      ALLOW_DOWNLOAD = #{allowDownload}
    WHERE 
      FILE_NO = #{fileNo}
  </update>

  <!-- 첨부파일 목록 조회 -->
  <select id="getFilesList" parameterType="String" resultType="BoardFile">
    SELECT
      FILE_NO AS fileNo,
      BOARD_NO AS boardNo,
      USER_NO AS userNo,
      ORIGIN_NAME AS originName,
      CHANGE_NAME AS changeName,
      ALLOW_DOWNLOAD AS allowDownload,
      FILE_SIZE AS fileSize
    FROM FILE_TABLE
    WHERE 
      BOARD_NO = #{boardNo}
  </select>

	<!-- 파일 번호로 첨부파일 삭제 -->
  <delete id="deleteFile" parameterType="String">
    DELETE FROM FILE_TABLE
    WHERE FILE_NO = #{fileNo}
  </delete>
  
<!-- 댓글 관련 쿼리 -->

  <!-- 특정 게시글의 댓글과 좋아요/싫어요 수를 반환 -->
  <select id="selectReply" resultType="Comment">
    WITH LIKE_COUNTS AS (
      SELECT COMMENT_NO, COUNT(*) AS LIKE_COUNT
      FROM LIKES_TABLE
      WHERE IS_LIKE = 1
      GROUP BY COMMENT_NO
    ),
    DISLIKE_COUNTS AS (
      SELECT COMMENT_NO, COUNT(*) AS DISLIKE_COUNT
      FROM LIKES_TABLE
      WHERE IS_LIKE = 0
      GROUP BY COMMENT_NO
    )
    SELECT
      C.COMMENT_NO AS commentNo,
      C.BOARD_NO AS refBno,
      C.USER_NO AS userNo,
      M.USER_ID AS commentWriter,
      C.CONTENT AS commentContent,
      TO_CHAR(C.CREATED_AT, 'YYYY-MM-DD HH24:MI') AS createDate,
      NVL(L.LIKE_COUNT, 0) AS likeCount,
      NVL(D.DISLIKE_COUNT, 0) AS dislikeCount
    FROM COMMENTS C
    JOIN MEMBER M ON C.USER_NO = M.USER_NO
    LEFT JOIN LIKE_COUNTS L ON C.COMMENT_NO = L.COMMENT_NO
    LEFT JOIN DISLIKE_COUNTS D ON C.COMMENT_NO = D.COMMENT_NO
    WHERE C.BOARD_NO = #{bno}
    ORDER BY C.CREATED_AT DESC
  </select>


  <!-- 댓글 정보를 COMMENTS 테이블에 추가 -->
  <insert id="insertReply" parameterType="Comment">
    INSERT INTO COMMENTS (COMMENT_NO, BOARD_NO, USER_NO, CONTENT)
    VALUES (SEQ_COMMENT_NO.NEXTVAL, #{refBno}, #{userNo}, #{commentContent})
  </insert>
    <!-- 댓글 삭제 -->
  <delete id="deleteReply">
    DELETE FROM COMMENTS
    WHERE 
      COMMENT_NO = #{commentNo}
  </delete>
  <!-- 특정 사용자가 특정 댓글에 좋아요/싫어요를 눌렀는지 확인 -->
  <select id="getCurrentLikeState" resultType="Like">
    SELECT COMMENT_NO AS commentNo,
           USER_NO AS userNo,
           IS_LIKE AS isLike,
           TO_CHAR(ENROLL_DATE, 'YYYY-MM-DD HH24:MI:SS') AS enrollDate
    FROM LIKES_TABLE
    WHERE COMMENT_NO = #{commentNo} AND USER_NO = #{userNo}
  </select>


 <!-- 좋아요/싫어요 추가 -->
  <insert id="insertLikeDislike" parameterType="map">
    INSERT INTO LIKES_TABLE (
      COMMENT_NO,
      USER_NO,
      IS_LIKE,
      ENROLL_DATE
    )
    VALUES (
      #{commentNo},
      #{userNo},
      #{isLike},
      SYSDATE
    )
  </insert>

  <!-- 좋아요/싫어요 업데이트 -->
  <update id="updateLikeDislike">
    UPDATE LIKES_TABLE
    SET 
      IS_LIKE = #{isLike},
      ENROLL_DATE = SYSDATE
    WHERE 
      COMMENT_NO = #{commentNo}
      AND USER_NO = #{userNo}
  </update>

  <!-- 좋아요/싫어요 삭제 -->
  <delete id="deleteLikeDislike" parameterType="map">
    DELETE FROM LIKES_TABLE
    WHERE 
      COMMENT_NO = #{commentNo}
      AND USER_NO = #{userNo}
  </delete>



  <!-- 댓글별 좋아요 수 가져오기 -->
  <select id="getLikeCount" resultType="int">
    SELECT COUNT(*)
    FROM LIKES_TABLE
    WHERE 
      COMMENT_NO = #{commentNo}
      AND IS_LIKE = 1
  </select>

  <!-- 댓글별 싫어요 수 가져오기 -->
  <select id="getDislikeCount" resultType="int">
    SELECT COUNT(*)
    FROM LIKES_TABLE
    WHERE 
      COMMENT_NO = #{commentNo}
      AND IS_LIKE = 0
  </select>




 <!-- 조회수 기준 게시글 조회 (페이징 처리 포함) -->
	<select id="selectPopularList" resultMap="boardResult"
		parameterType="map">
		SELECT *
		FROM (
		SELECT a.*, ROWNUM AS row_number
		FROM (
		SELECT
		BOARD_NO,
		BOARD_TITLE,
		USER_NO,
		(SELECT USER_ID FROM MEMBER WHERE
		USER_NO = BOARD.USER_NO) AS BOARD_WRITER,
		BOARD_CONTENT,
		TO_CHAR(ENROLL_DATE, 'YYYY-MM-DD') AS ENROLL_DATE,
		BOARD_VIEWS,
		BOARD_CATEGORY
		FROM BOARD
		WHERE STATUS = 'Y'
		ORDER BY
		TO_NUMBER(BOARD_VIEWS) DESC
		) a
		WHERE ROWNUM &lt;= #{endRow}
		)
		WHERE
		row_number &gt;= #{startRow}
	</select>






	<!-- 최근 7일 내 인기 게시글 조회 -->
	<select id="selectRecentPopularList" parameterType="map"
		resultMap="boardResult">
		SELECT *
FROM (
    SELECT
        b.BOARD_NO,
        b.BOARD_TYPE,
        b.BOARD_TITLE,
        b.USER_NO,
        m.USER_ID AS BOARD_WRITER,
        b.BOARD_CONTENT,
        TO_CHAR(b.ENROLL_DATE, 'YYYY-MM-DD') AS ENROLL_DATE,
        b.MODIFIED_DATE,
        b.BOARD_VIEWS,
        b.BOARD_CATEGORY,
        b.STATUS,
        ROW_NUMBER() OVER (ORDER BY b.BOARD_VIEWS DESC) AS RN
    FROM BOARD b
    LEFT JOIN MEMBER m ON b.USER_NO = m.USER_NO
    WHERE b.STATUS = 'Y'
    AND b.ENROLL_DATE >= SYSDATE - 7
)
WHERE RN BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 카테고리별 게시글 수 조회 -->
	<select id="selectCountCategoryList" parameterType="string"
		resultType="int">
		SELECT COUNT(*)
		FROM BOARD
		WHERE STATUS = 'Y' AND
		BOARD_CATEGORY = #{type}
	</select>


	<!-- 카테고리별 게시글 목록 조회 -->
	<select id="selectListByCategory" resultMap="boardResult">
		SELECT RNUM,
		BOARD_NO, BOARD_TYPE, BOARD_TITLE, USER_NO, BOARD_WRITER,
		BOARD_CONTENT,
		ENROLL_DATE, MODIFIED_DATE, BOARD_VIEWS, BOARD_CATEGORY,
		STATUS
		FROM (
		SELECT
		ROWNUM AS RNUM,
		A.BOARD_NO,
		A.BOARD_TYPE,
		A.BOARD_TITLE,
		A.USER_NO,
		A.BOARD_WRITER,
		A.BOARD_CONTENT,
		A.ENROLL_DATE,
		A.MODIFIED_DATE,
		A.BOARD_VIEWS,
		A.BOARD_CATEGORY,
		A.STATUS
		FROM (
		SELECT
		B.BOARD_NO,
		B.BOARD_TYPE,
		B.BOARD_TITLE,
		B.USER_NO,
		M.USER_ID AS
		BOARD_WRITER,
		B.BOARD_CONTENT,
		TO_CHAR(B.ENROLL_DATE, 'YYYY-MM-DD') AS
		ENROLL_DATE,
		TO_CHAR(B.MODIFIED_DATE, 'YYYY-MM-DD') AS MODIFIED_DATE,
		B.BOARD_VIEWS,
		B.BOARD_CATEGORY,
		B.STATUS
		FROM
		BOARD B
		JOIN
		MEMBER M ON
		B.USER_NO = M.USER_NO
		WHERE
		B.STATUS = 'Y'
		AND B.BOARD_CATEGORY =
		#{boardCategory}
		ORDER BY
		B.ENROLL_DATE DESC
		) A
		WHERE ROWNUM &lt;=
		#{endRow}
		)
		WHERE RNUM &gt; #{startRow}
	</select>





</mapper>                                                                        
	         
