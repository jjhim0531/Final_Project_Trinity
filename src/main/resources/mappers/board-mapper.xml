<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="boardMapper">

	<!-- 게시글 ResultMap 정의 -->
	<resultMap id="boardResult"
		type="com.project.trinity.community.board.model.vo.Board">
		<id property="boardNo" column="BOARD_NO" />
		<result property="boardType" column="BOARD_TYPE" />
		<result property="boardTitle" column="BOARD_TITLE" />
		<result property="userNo" column="USER_NO" />
		<result property="boardWriter" column="BOARD_WRITER" />
		<result property="boardContent" column="BOARD_CONTENT" />
		<result property="enrollDate" column="ENROLL_DATE" />
		<result property="modifiedDate" column="MODIFIED_DATE" />
		<result property="boardViews" column="BOARD_VIEWS" />
		<result property="status" column="STATUS" />
		<result property="categoryId" column="CATEGORY_ID" />
		<result property="categoryName" column="CATEGORY_NAME" />
		<collection property="fileList"
			ofType="com.project.trinity.community.board.model.vo.BoardFile"
			javaType="java.util.List">
			<id property="fileNo" column="FILE_NO" />
			<result property="originName" column="ORIGIN_NAME" />
			<result property="changeName" column="CHANGE_NAME" />
			<result property="allowDownload" column="ALLOW_DOWNLOAD" />
			<result property="fileSize" column="FILE_SIZE" />
		</collection>
	</resultMap>

	
	<!-- MedAnswer ResultMap 정의 -->
<resultMap id="medAnswerResult" type="com.project.trinity.community.board.model.vo.MedAnswer">
    <result property="answerNo" column="ANSWER_NO" />
    <result property="boardNo" column="BOARD_NO" />
    <result property="userNo" column="USER_NO" />
    <result property="answerContent" column="ANSWER_CONTENT" />
    <result property="enrollDate" column="ENROLL_DATE" jdbcType="DATE" />
    <result property="modifiedDate" column="MODIFIED_DATE" />
    <result property="status" column="STATUS" />
    <result property="isMedicalField" column="IS_MEDICAL_FIELD" />
    <result property="medicalFieldId" column="MEDICAL_FIELD_ID" /> 
</resultMap>



	<select id="selectAllCategories"
		resultType="com.project.trinity.community.board.model.vo.BoardCategory">
		SELECT category_id AS categoryId, category_name AS
		categoryName, sort_order
		AS sortOrder, is_active AS isActive
		FROM
		board_category
		WHERE is_active = 'Y'
		ORDER BY sort_order
	</select>

	<!-- 게시글 총 갯수 조회 -->
	<select id="selectListCount" resultType="int">
		SELECT COUNT(*) FROM
		BOARD
	</select>

	<!-- 게시글 리스트 조회 -->
	<select id="selectList" resultType="Board">
		SELECT
		B.BOARD_NO AS boardNo,
		B.CATEGORY_ID AS categoryId,
		C.CATEGORY_NAME AS categoryName, -- 카테고리 이름 추가
		B.BOARD_TITLE AS boardTitle,
		M.USER_ID AS boardWriter,
		TO_CHAR(B.ENROLL_DATE, 'YYYY/MM/DD') AS enrollDate, -- 문자열로 변환
		B.BOARD_VIEWS AS boardViews
		FROM BOARD B
		JOIN MEMBER M ON B.USER_NO = M.USER_NO
		LEFT JOIN BOARD_CATEGORY C ON B.CATEGORY_ID = C.CATEGORY_ID --
		BOARD_CATEGORY 테이블 조인

		<if test="sortType == '조회수'">
			ORDER BY B.BOARD_VIEWS DESC
		</if>

		<if test="sortType == '작성일'">
			ORDER BY B.ENROLL_DATE DESC
		</if>

		<if test="sortType == null">
			ORDER BY B.BOARD_NO DESC
		</if>

	</select>


	<select id="getPreviousBoard" parameterType="String"
		resultType="String">
		SELECT BOARD_NO
		FROM (
		SELECT BOARD_NO
		FROM BOARD
		WHERE
		BOARD_NO &lt; #{bno}
		AND STATUS = 'Y'
		ORDER BY BOARD_NO DESC
		)
		WHERE
		ROWNUM = 1
	</select>

	<select id="getNextBoard" parameterType="String"
		resultType="String">
		SELECT BOARD_NO
		FROM (
		SELECT BOARD_NO
		FROM BOARD
		WHERE
		BOARD_NO &gt; #{bno}
		AND STATUS = 'Y'
		ORDER BY BOARD_NO ASC
		)
		WHERE ROWNUM
		= 1
	</select>





	<!-- 게시글 조회수 증가 -->
	<update id="increaseCount">
		UPDATE BOARD
		SET BOARD_VIEWS = TO_NUMBER(BOARD_VIEWS)
		+ 1
		WHERE BOARD_NO = #{bno}
	</update>




	<!-- 댓글 추가 -->
	<insert id="insertReply" parameterType="Comment">
		INSERT INTO COMMENTS
		(COMMENT_NO, BOARD_NO, USER_NO, CONTENT)
		VALUES
		(SEQ_COMMENT_NO.NEXTVAL, #{refBno}, #{userNo}, #{commentContent})
	</insert>


	<!-- 좋아요/싫어요 상태 확인 -->
	<select id="getCurrentLikeState" resultType="Like">
		SELECT
		COMMENT_NO AS commentNo,
		USER_NO AS userNo,
		IS_LIKED AS isLike,
		TO_CHAR(ENROLL_DATE, 'YYYY/MM/DD') AS enrollDate -- 문자열로 변환
		FROM LIKES_TABLE
		WHERE COMMENT_NO = #{commentNo} AND USER_NO = #{userNo}
	</select>





	<!-- 좋아요/싫어요 추가 -->
	<insert id="insertLikeDislike" parameterType="map">
		INSERT INTO
		LIKES_TABLE (COMMENT_NO, USER_NO, IS_LIKED, ENROLL_DATE)
		VALUES
		(#{commentNo}, #{userNo}, #{isLike}, SYSDATE)
	</insert>

	<update id="updateLikeDislike">
		UPDATE LIKES_TABLE
		SET IS_LIKED = #{isLike},
		ENROLL_DATE = SYSDATE
		WHERE COMMENT_NO = #{commentNo} AND USER_NO =
		#{userNo}
	</update>

	<!-- 좋아요/싫어요 삭제 -->
	<delete id="deleteLikeDislike" parameterType="map">
		DELETE FROM
		LIKES_TABLE
		WHERE COMMENT_NO = #{commentNo}
		AND USER_NO = #{userNo}
	</delete>

	<!-- 좋아요 개수 -->
	<select id="getLikeCount" resultType="int">
		SELECT COUNT(*)
		FROM
		LIKES_TABLE
		WHERE COMMENT_NO = #{commentNo} AND IS_LIKED = 1
	</select>

	<select id="getDislikeCount" resultType="int">
		SELECT COUNT(*)
		FROM
		LIKES_TABLE
		WHERE COMMENT_NO = #{commentNo} AND IS_LIKED = 0
	</select>


	<!-- 게시글 추가 -->
	<insert id="insertBoard" parameterType="Board">
		INSERT INTO BOARD (
		USER_NO,
		BOARD_TITLE,
		BOARD_CONTENT,
		CATEGORY_ID
		)
		VALUES (
		#{userNo},
		#{boardTitle},
		#{boardContent},
		#{categoryId} <!-- 카테고리 
			ID 수정 -->
		)
		<selectKey keyProperty="boardNo"
			resultType="java.lang.String" order="AFTER">
			SELECT 'B' ||
			SEQ_BOARD_NO.CURRVAL FROM DUAL
		</selectKey>
	</insert>

	<select id="getCategoryNameById" resultType="String">
		SELECT category_name
		FROM BOARD_CATEGORY
		WHERE category_id = #{categoryId}
	</select>



	<!-- 첨부파일 저장 -->
	<insert id="insertFile" parameterType="BoardFile">
		INSERT INTO FILE_TABLE (
		FILE_NO, BOARD_NO, USER_NO, ORIGIN_NAME, CHANGE_NAME, ALLOW_DOWNLOAD,
		FILE_SIZE
		) VALUES (
		SEQ_FILE_NO.NEXTVAL, #{boardNo}, #{userNo},
		#{originName}, #{changeName},
		CASE WHEN #{allowDownload} IS NULL THEN
		'Y' ELSE #{allowDownload} END,
		#{fileSize}
		)
	</insert>

	<update id="updateFileAllowDownload" parameterType="BoardFile">
		UPDATE
		FILE_TABLE
		SET ALLOW_DOWNLOAD = #{allowDownload}
		WHERE FILE_NO =
		#{fileNo}
	</update>

	<delete id="deleteFile" parameterType="String">
		DELETE FROM FILE_TABLE
		WHERE FILE_NO = #{fileNo}
	</delete>

	<delete id="deleteAllFilesByBoardNo" parameterType="String">
		DELETE FROM
		FILE_TABLE
		WHERE BOARD_NO = #{bno}
	</delete>

	<!-- boardMapper.xml -->
	<delete id="deleteCommentsByBoardNo" parameterType="String">
		DELETE FROM
		COMMENTS
		WHERE BOARD_NO = #{bno}
	</delete>

	<!-- boardMapper.xml -->
	<delete id="deleteBoard" parameterType="String">
		UPDATE BOARD
		SET STATUS =
		'N'
		WHERE BOARD_NO = #{bno}
	</delete>


	<delete id="adminDeleteBoard" parameterType="String">
		DELETE FROM BOARD
		WHERE BOARD_NO = #{bno}
	</delete>

	<update id="adminRestoreBoard" parameterType="String">
		UPDATE BOARD
		SET
		STATUS = 'Y'
		WHERE BOARD_NO = #{bno}
	</update>


	<select id="getFileList" parameterType="String"
		resultType="BoardFile">
		SELECT
		FILE_NO AS fileNo,
		BOARD_NO AS boardNo,
		USER_NO AS
		userNo,
		ORIGIN_NAME AS originName,
		CHANGE_NAME AS changeName,
		ALLOW_DOWNLOAD AS allowDownload,
		File_Size AS fileSize
		FROM
		FILE_TABLE
		WHERE
		BOARD_NO = #{bno}
	</select>

	<select id="getSingleFile" parameterType="String"
		resultType="BoardFile">
		SELECT
		FILE_NO AS fileNo,
		BOARD_NO AS boardNo,
		USER_NO AS
		userNo,
		ORIGIN_NAME AS originName,
		CHANGE_NAME AS changeName,
		ALLOW_DOWNLOAD AS allowDownload,
		File_Size AS fileSize
		FROM
		FILE_TABLE
		WHERE
		FILE_NO = #{fileNo}
	</select>

	<update id="updateAllowDownload" parameterType="map">
		UPDATE FILE_TABLE
		SET ALLOW_DOWNLOAD = #{allowDownload}
		WHERE BOARD_NO = #{boardNo}
	</update>



	<!-- bno로 게시글 + 첨부파일 정보 조회 -->
	<!-- 게시글 + 첨부파일 정보 조회 -->
	<select id="selectBoard" resultMap="boardResult">
		SELECT
		B.BOARD_NO,
		B.BOARD_TYPE,
		B.BOARD_TITLE,
		B.USER_NO,
		M.USER_ID AS BOARD_WRITER,
		B.BOARD_CONTENT,
		TO_CHAR(B.ENROLL_DATE, 'YYYY-MM-DD') AS ENROLL_DATE,
		TO_CHAR(B.MODIFIED_DATE, 'YYYY-MM-DD') AS MODIFIED_DATE,
		B.BOARD_VIEWS,
		C.CATEGORY_ID,
		C.CATEGORY_NAME,
		B.STATUS,
		F.FILE_NO,
		F.ORIGIN_NAME,
		F.CHANGE_NAME,
		F.ALLOW_DOWNLOAD,
		F.FILE_SIZE
		FROM
		BOARD B
		JOIN
		MEMBER M ON B.USER_NO = M.USER_NO
		LEFT JOIN
		FILE_TABLE F ON B.BOARD_NO = F.BOARD_NO
		LEFT JOIN
		BOARD_CATEGORY C ON B.CATEGORY_ID = C.CATEGORY_ID AND C.IS_ACTIVE = 'Y'
		WHERE
		B.STATUS = 'Y'
		AND B.BOARD_NO = #{bno}

	</select>

	<select id="getBoardNavigation" parameterType="int"
		resultType="Board">
		SELECT *
		FROM (
		SELECT
		BNO,
		LEAD(BNO, 1, NULL) OVER (ORDER BY
		BNO DESC) AS next,
		LAG(BNO, 1, NULL) OVER (ORDER BY BNO DESC) AS last,
		TITLE,
		LEAD(TITLE, 1, NULL) OVER (ORDER BY BNO DESC) AS nexttitle,
		LAG(TITLE, 1, NULL) OVER (ORDER BY BNO DESC) AS lasttitle
		FROM BOARD
		WHERE STATUS = 'Y'
		)
		WHERE BNO = #{bno}
	</select>








	<update id="updateBoard" parameterType="Board">
		UPDATE BOARD
		SET
		CATEGORY_ID = #{categoryId},
		BOARD_TITLE = #{boardTitle},
		BOARD_CONTENT
		= #{boardContent},
		MODIFIED_DATE = SYSDATE
		WHERE BOARD_NO
		= #{boardNo}
	</update>



	<!-- 댓글 목록 조회 -->
	<select id="selectReply" resultType="Comment">
		WITH LIKE_COUNTS AS (
		SELECT
		COMMENT_NO,
		COUNT(*) AS LIKE_COUNT
		FROM
		LIKES_TABLE
		WHERE IS_LIKED = 1
		GROUP BY COMMENT_NO
		),
		DISLIKE_COUNTS AS (
		SELECT
		COMMENT_NO,
		COUNT(*) AS DISLIKE_COUNT
		FROM LIKES_TABLE
		WHERE
		IS_LIKED = 0
		GROUP BY COMMENT_NO
		)
		SELECT
		C.COMMENT_NO AS commentNo,
		C.BOARD_NO AS refBno,
		C.USER_NO AS userNo,
		M.USER_ID AS commentWriter,
		C.CONTENT AS commentContent,
		TO_CHAR(C.CREATED_AT, 'YYYY/MM/DD') AS createDate,  <!-- TO_CHAR 추가 -->
		NVL(L.LIKE_COUNT, 0) AS likeCount,
		NVL(D.DISLIKE_COUNT, 0) AS
		dislikeCount
		FROM COMMENTS C
		JOIN MEMBER M ON C.USER_NO = M.USER_NO
		LEFT JOIN LIKE_COUNTS L ON C.COMMENT_NO = L.COMMENT_NO
		LEFT JOIN DISLIKE_COUNTS D ON C.COMMENT_NO = D.COMMENT_NO
		WHERE C.BOARD_NO = #{bno}
		ORDER BY C.CREATED_AT DESC
	</select>


	<select id="selectTopBoardList" resultMap="boardResult">
		SELECT *
		FROM (
		SELECT
		BOARD_NO,
		BOARD_TITLE,
		BOARD_WRITER,
		ORIGIN_NAME,
		COUNT AS viewCount, <!-- 조회수 -->
		CREATE_DATE AS createDate
		FROM BOARD
		WHERE STATUS
		= 'Y'
		ORDER BY COUNT
		DESC
		)
		WHERE ROWNUM BETWEEN 1 AND 5
	</select>



	<!-- 게시글에 첨부된 파일들 조회 -->
	<select id="getFilesForBoard" parameterType="String"
		resultType="BoardFile">
		SELECT
		FILE_NO AS fileNo,
		BOARD_NO AS boardNo,
		USER_NO AS
		userNo,
		ORIGIN_NAME AS originName,
		CHANGE_NAME AS changeName,
		ALLOW_DOWNLOAD AS allowDownload,
		FILE_SIZE AS fileSize
		FROM FILE_TABLE
		WHERE BOARD_NO = #{bno}
	</select>


	<delete id="deleteReply">
		DELETE FROM COMMENTS
		WHERE COMMENT_NO = #{replyNo}
	</delete>
	<!-- 좋아요 관련 SQL 시작 -->
	<!-- 좋아요 추가 -->
	<insert id="insertLike" parameterType="map">
		INSERT INTO LIKES_TABLE (
		COMMENT_NO,
		USER_NO,
		ENROLL_DATE
		) VALUES (
		#{commentNo},        <!-- 댓글 번호 (insertReply에서 반환된 값) -->
		#{userNo},           <!-- 좋아요 작성자 번호 -->
		SYSDATE              <!-- 등록 날짜 -->
		)
	</insert>


	<!-- 좋아요 취소 -->
	<delete id="deleteLike" parameterType="map">
		DELETE FROM LIKES_TABLE
		WHERE COMMENT_NO = #{commentNo} AND USER_NO = #{userNo}
	</delete>

	<!-- 좋아요 상태 확인 -->
	<select id="checkLike" parameterType="map" resultType="int">
		SELECT
		COUNT(*)
		FROM LIKES_TABLE
		WHERE COMMENT_NO = #{commentNo} AND USER_NO =
		#{userNo}
	</select>



	<!-- 좋아요 관련 SQL 끝 -->
	<!-- 게시글 총 개수를 반환하는 쿼리 -->
	<select id="getListCount" resultType="int">
		<choose>
			<!-- 'popular'일 때, 최근 7일 동안 조회수가 높은 게시글의 개수 -->
			<when test="categoryId == 'popular'">
				SELECT COUNT(*)
				FROM BOARD
				WHERE ENROLL_DATE >= SYSDATE
				- 7
				AND STATUS = 'Y'
				AND BOARD_VIEWS > 0
			</when>

			<!-- 일반 카테고리에서 게시글 개수 조회 -->
			<otherwise>
				SELECT COUNT(*)
				FROM BOARD
				WHERE CATEGORY_ID = #{categoryId}
				AND STATUS = 'Y'
			</otherwise>
		</choose>
	</select>


	<select id="selectListByCategory" parameterType="map"
		resultMap="boardResult">
		SELECT *
		FROM (
		SELECT
		b.BOARD_NO,
		b.BOARD_TYPE,
		b.BOARD_TITLE,
		b.USER_NO,
		m.USER_ID AS BOARD_WRITER,
		b.BOARD_CONTENT,
		TO_CHAR(b.ENROLL_DATE,
		'YYYY/MM/DD') AS ENROLL_DATE,  <!-- TO_CHAR 추가 -->
		TO_CHAR(b.MODIFIED_DATE, 'YYYY/MM/DD') AS MODIFIED_DATE, <!-- TO_CHAR 추가 -->
		b.BOARD_VIEWS,
		c.CATEGORY_NAME AS CATEGORY_NAME,
		b.STATUS,
		ROW_NUMBER()
		OVER (
		ORDER BY
		<if test="categoryId != null">
			b.ENROLL_DATE DESC
		</if>
		<if test="categoryId == null">
			b.BOARD_VIEWS DESC
		</if>
		) AS RN
		FROM BOARD b
		LEFT JOIN MEMBER m ON b.USER_NO = m.USER_NO
		LEFT
		JOIN BOARD_CATEGORY c ON b.CATEGORY_ID = c.CATEGORY_ID
		WHERE b.STATUS =
		'Y'
		<if test="categoryId != null">
			AND b.CATEGORY_ID = #{categoryId}
		</if>
		)
		WHERE RN BETWEEN #{startRow} AND #{endRow}
	</select>


	<!-- 카테고리별 게시글 수 조회 -->
	<select id="selectCountCategoryList" parameterType="string"
		resultType="int">
		SELECT COUNT(*)
		FROM BOARD b
		JOIN BOARD_CATEGORY c ON
		b.CATEGORY_ID = c.CATEGORY_ID
		WHERE b.STATUS = 'Y' AND c.CATEGORY_ID =
		#{type}
	</select>

	<select id="getPostsByUserNo" parameterType="string"
		resultMap="boardResult">
		SELECT BOARD_NO, BOARD_TITLE, ENROLL_DATE, BOARD_VIEWS,
		STATUS
		FROM BOARD
		WHERE USER_NO = #{userNo}
		AND STATUS = 'Y'
		ORDER BY
		ENROLL_DATE DESC
	</select>


<!-- 특정 게시글에 대한 MedAnswer 조회 -->
<select id="selectAnswersByBoardNo" parameterType="String" resultType="MedAnswer">
    SELECT
        ANSWER_NO,
        BOARD_NO,
        MED_NO,
        ANSWER_CONTENT,
        TO_CHAR(ENROLL_DATE, 'YYYY/MM/DD') AS ENROLL_DATE, <!-- 날짜 형식 변환 -->
        TO_CHAR(MODIFIED_DATE, 'YYYY/MM/DD') AS MODIFIED_DATE,
        STATUS,
        IS_MEDICAL_FIELD
    FROM
        MED_ANSWERS
    WHERE
        BOARD_NO = #{boardNo}
</select>





	<!-- MedAnswer 추가 -->
<insert id="insertAnswer" parameterType="MedAnswer">
    INSERT INTO MED_ANSWERS (
        ANSWER_NO,
        BOARD_NO,
        MED_NO,
        ANSWER_CONTENT,
        ENROLL_DATE,
        MODIFIED_DATE,
        STATUS,
        IS_MEDICAL_FIELD
    ) VALUES (
        SEQ_ANSWER_NO.NEXTVAL,
        #{boardNo},
        #{medNo},
        #{answerContent},
        SYSDATE,  <!-- 현재 날짜와 시간을 저장 -->
        NULL,
        #{status},
        #{isMedicalField}
    )
</insert>











</mapper>









                                                                   
	         
