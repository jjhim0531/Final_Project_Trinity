<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="memberMapper">

	<!-- 단축 설정 -->
	<resultMap type="Member" id="memberResultSet">
		<result column="USER_NO" property="userNo" />
		<result column="USER_ID" property="userId" />
		<result column="USER_PWD" property="userPwd" />
		<result column="USER_NAME" property="userName" />
		<result column="EMAIL" property="email" />
		<result column="PHONE" property="phone" />
		<result column="BIRTHDAY" property="birthday" />
		<result column="GENDER" property="gender" />
		<result column="ADDRESS" property="address" />
		<result column="ENROLL_DATE" property="enrollDate" />
		<result column="STATUS" property="status" />
		<result column="ISADMIN" property="isAdmin" />
		<result column="MED_KEY" property="medKey" />
		<result column="HOS_NO" property="hosNo" />
		<result column="USERPROFILE" property="userProfile" />
		<result column="POSTCODE" property="postcode" />
		<result column="BIOGRAPHY" property="biography" />

	</resultMap>

	<resultMap id="rankupResultSet" type="Rankup">
		<result column="SEQ_NO" property="seqNo" />
		<result column="USER_NO" property="userNo" />
		<result column="RES_TITLE" property="resTitle" />
		<result column="SUBJECT" property="subject" />
		<result column="LIC_PICTURE" property="licPicture" />
		<result column="STATUS" property="status" />
		<result column="USER_NAME" property="userName" />
		<result column="USER_ID" property="userId" />
		<result column="EMAIL" property="email" />
		<result column="PHONE" property="phone" />
	</resultMap>

	<resultMap type="HealthReservation"
		id="HealthReservationResultSet">
		<result property="hResNo" column="H_RES_NO" />
		<result property="userNo" column="USER_NO" />
		<result property="gstNo" column="GST_NO" /> <!-- PATIENT_NAME 추가 -->
		<result property="hosNo" column="HOS_NO" />
		<result property="resDate" column="RES_DATE" />
		<result property="resTime" column="RES_TIME" />
		<result property="resCategory" column="RES_CATEGORY" />
		<result property="resComment" column="RES_COMMENT" />
		<result property="patientName" column="PATIENT_NAME" />
		<result property="patientBirthday" column="PATIENT_BIRTH" />
		<result property="patientEmail" column="PATIENT_EMAIL" />
		<result property="patientGender" column="PATIENT_GENDER" />
		<result property="patientResult" column="PATIENT_RESULT" />
	</resultMap>

	<resultMap type="DoctorReview" id="DoctorReviewResultSet">
		<result property="reviewNo" column="REVIEW_NO" />
		<result property="userNo" column="USER_NO" />
		<result property="doctorNo" column="DOCTOR_NO" />
		<result property="reviewTitle" column="REVIEW_TITLE" />
		<result property="reviewContent" column="REVIEW_CONTENT" />
		<result property="reviewCreatedAt" column="REVIEW_CREATED_AT" />
		<result property="reviewUpdatedAt" column="REVIEW_UPDATED_AT" />
		<result property="reviewRating" column="REVIEW_RATING" />
		<result property="userName" column="USER_NAME" />
		<result property="userProfile" column="USERPROFILE" />
	</resultMap>

	<!-- 로그인 쿼리 -->
	<select id="loginMember" parameterType="Member"
		resultMap="memberResultSet">
		SELECT USER_NO,
		USER_ID,
		USER_PWD,
		USER_NAME,
		EMAIL,
		PHONE,
		BIRTHDAY,
		GENDER,
		ADDRESS,
		ENROLL_DATE,
		STATUS,
		ISADMIN,
		MED_KEY,
		HOS_NO,
		USERPROFILE
		FROM
		MEMBER
		WHERE USER_ID = #{userId}
		AND STATUS = 'Y'
	</select>

	<!-- 아이디 중복 확인 쿼리 -->
	<select id="idCheck" parameterType="string" resultType="int">
		SELECT
		COUNT(*) FROM MEMBER WHERE USER_ID = #{checkId}
	</select>

	<!-- userId로 회원 정보 조회 -->
	<select id="findByUserId" parameterType="String"
		resultType="Member">
		SELECT USER_NO,
		USER_ID,
		USER_PWD,
		USER_NAME,
		EMAIL,
		PHONE,
		BIRTHDAY,
		GENDER,
		ADDRESS,
		USERPROFILE,
		MED_KEY,
		BIOGRAPHY <!-- 약력 필드 추가 -->
		FROM MEMBER
		WHERE USER_ID = #{userId}
	</select>



	<insert id="insertMember" parameterType="member">
		INSERT INTO MEMBER
		(USER_ID, USER_PWD, USER_NAME, EMAIL, PHONE,
		BIRTHDAY, POSTCODE, USERPROFILE, ADDRESS,
		GENDER)
		VALUES (
		#{userId},
		#{userPwd},
		#{userName},
		#{email},
		#{phone}, <!-- 하이픈 포함된 전화번호 -->
		TO_CHAR(TO_DATE(#{birthday}, 'YYYY-MM-DD'), 'YYMMDD'),
		#{postcode},
		#{userProfile},
		#{address},
		#{gender}
		)
	</insert>

	<select id="selectMedicalFieldByMedNo" parameterType="String"
		resultType="MedicalField">
		SELECT
		MED_NO,
		JOB,
		MEDICAL_FIELD_ID
		FROM MEDICAL_FIELD
		WHERE
		MED_NO = #{medKey}
	</select>



	<update id="updateMember" parameterType="Member">
		UPDATE MEMBER
		SET
		USER_NAME = NVL(#{userName}, USER_NAME),
		EMAIL = NVL(#{email}, EMAIL),
		PHONE = NVL(#{phone}, PHONE),
		BIRTHDAY = NVL(#{birthday}, BIRTHDAY),
		GENDER = NVL(#{gender}, GENDER),
		ADDRESS = NVL(#{address}, ADDRESS),
		USERPROFILE = NVL(#{userProfile}, USERPROFILE),
		BIOGRAPHY = NVL(#{biography}, BIOGRAPHY)
		WHERE USER_NO = #{userNo}
	</update>








	<!-- 이메일로 아이디 찾기 -->
	<select id="findIdByEmail" parameterType="map"
		resultType="string">
		SELECT USER_ID
		FROM MEMBER
		WHERE USER_NAME = #{userName} AND
		EMAIL = #{email}
	</select>

	<!-- 휴대전화로 아이디 찾기 -->
	<select id="findIdByPhone" parameterType="map"
		resultType="string">
		SELECT USER_ID
		FROM MEMBER
		WHERE USER_NAME = #{userName} AND
		PHONE = #{phone}
	</select>

	<select id="findMemberForResetPassword" parameterType="map"
		resultType="com.project.trinity.member.model.vo.Member">
		SELECT *
		FROM MEMBER
		WHERE USER_ID = #{userId}
		AND USER_NAME =
		#{userName}
		AND EMAIL = #{email}
	</select>


	<update id="updateTemporaryPassword" parameterType="map">
		UPDATE MEMBER
		SET USER_PWD = #{encryptedPassword}
		WHERE USER_ID = #{userId}
	</update>

	<update id="updatePassword" parameterType="map">
		UPDATE MEMBER
		SET
		USER_PWD = #{encryptedPassword}
		WHERE USER_ID = #{userId}
	</update>


	<update id="deleteMember" parameterType="string">
		UPDATE MEMBER
		SET STATUS = 'N' <!-- 상태 비활성화 -->
		WHERE USER_ID = #{userId}
	</update>

	<!-- 병원 번호로 의사 불러오기 -->
	<select id="selectDoctorInfoList" parameterType="string"
		resultMap="memberResultSet">
		SELECT USER_NO,
		USER_ID,
		USER_PWD,
		USER_NAME,
		EMAIL,
		PHONE,
		BIRTHDAY,
		GENDER,
		ADDRESS,
		ENROLL_DATE,
		STATUS,
		ISADMIN,
		MED_KEY,
		HOS_NO,
		USERPROFILE
		FROM MEMBER
		WHERE HOS_NO = #{hosNo} AND
		STATUS = 'Y'
	</select>

	<!-- 의사 유저 번호로 댓글 리스트 받기 -->
	<select id="selectDoctorReview" parameterType="string"
		resultMap="DoctorReviewResultSet">
		SELECT M.USER_NAME,
		M.USERPROFILE,
		D.DOCTOR_NO,
		D.REVIEW_TITLE,
		D.REVIEW_CONTENT,
		D.REVIEW_CREATED_AT,
		D.REVIEW_RATING
		FROM MEMBER M
		JOIN DOCTOR_REVIEW D USING(USER_NO)
		WHERE DOCTOR_NO =
		#{doctorNo}
	</select>

	<update id="updateHospitalDoctor" parameterType="HashMap">
		UPDATE MEMBER
		SET
		HOS_NO = #{hosNo}
		WHERE USER_ID = #{userId}
	</update>

	<update id="hospitalAccountDeleteDoctor">
		UPDATE MEMBER
		SET
		HOS_NO = ''
		WHERE USER_NO = #{userNo}
	</update>
	
	<!-- 의사 약력 불러오기 -->
	<select id="selectDoctorBiography" parameterType="string"
		resultType="String">
		SELECT BIOGRAPHY
		FROM MEMBER
		WHERE USER_NO = #{doctorNo}
	</select>
	
	<insert id="insertDoctorReview" parameterType="HashMap">
		INSERT INTO DOCTOR_REVIEW
			(USER_NO,
	         DOCTOR_NO,
	         REVIEW_TITLE,
	         REVIEW_CONTENT,
	         REVIEW_RATING
	        )
		VALUES (
				#{writerNo},
		        #{doctorNo},
		        #{reviewTitle},
		        #{reviewContent},
		        #{reviewRating}
			   )
	</insert>
	
</mapper>