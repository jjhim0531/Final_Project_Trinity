-- 기존 테이블 및 시퀀스 삭제

DROP TABLE HOSPITAL_ACCOUNT CASCADE CONSTRAINTS;
DROP TABLE HOSPITAL_INFO CASCADE CONSTRAINTS;
DROP TABLE MEDICAL_FIELD CASCADE CONSTRAINTS;
DROP TABLE MEMBER CASCADE CONSTRAINTS;
DROP TABLE DOCTOR_REVIEW CASCADE CONSTRAINTS;
DROP TABLE RESERVATION CASCADE CONSTRAINTS;
DROP TABLE TREATMENT CASCADE CONSTRAINTS;
DROP TABLE BOARD CASCADE CONSTRAINTS;
DROP TABLE FILE_TABLE CASCADE CONSTRAINTS;
DROP TABLE COMMENTS CASCADE CONSTRAINTS;



-- 기존 시퀀스 삭제
BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_HOS_NO';
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_RES_NO';
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_USER_NO';
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TREATMENT_NO';
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_BOARD_NO';
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_REVIEW_NO';
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_FILE_NO';
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_MED_NO';
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_BOARD_VIEWS';
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_REVIEW_VIEWS';
EXCEPTION
    WHEN OTHERS THEN
        NULL; -- 시퀀스가 존재하지 않을 경우 예외 무시
END;
/

-- 시퀀스 생성
CREATE SEQUENCE SEQ_HOS_NO START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_RES_NO START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_USER_NO START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_TREATMENT_NO START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_BOARD_NO START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_REVIEW_NO START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_FILE_NO START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SEQ_MED_NO START WITH 1 INCREMENT BY 1 NOCACHE;

-- 조회수 시퀀스: 0부터 시작
CREATE SEQUENCE SEQ_BOARD_VIEWS START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE;
CREATE SEQUENCE SEQ_REVIEW_VIEWS START WITH 0 INCREMENT BY 1 MINVALUE 0 NOCACHE;

-- 테이블 생성
CREATE TABLE HOSPITAL_ACCOUNT (
    HOS_NO NUMBER NOT NULL PRIMARY KEY,
    HOS_ID VARCHAR2(20) NOT NULL,
    HOS_PWD VARCHAR2(20) NOT NULL,
    HOS_NAME VARCHAR2(50) NOT NULL,
    HOS_ADDRESS VARCHAR2(200) NOT NULL,
    HOS_TEL VARCHAR2(20) NOT NULL,
    HOS_YEAR DATE,
    HOS_TIME VARCHAR2(20),
    HOS_INFO VARCHAR2(2000),
    HOS_ONDUTY VARCHAR2(20),
    HOS_PARKING VARCHAR2(100),
    FOREIGN KEY (HOS_NO) REFERENCES HOSPITAL_INFO (HOS_NO)
);

CREATE TABLE HOSPITAL_INFO (
    HOS_NO NUMBER NOT NULL PRIMARY KEY,
    HOS_NAME VARCHAR2(250),
    HOS_ADDRESS VARCHAR2(250),
    HOS_TEL VARCHAR2(20),
    DEPARTMENT VARCHAR2(250),
    HOS_START_TIME1 NUMBER,
    HOS_CLOSE_TIME1 NUMBER,
    HOS_START_TIME2 NUMBER,
    HOS_CLOSE_TIME2 NUMBER,
    HOS_LATITUDE NUMBER,
    HOS_LONGITUDE NUMBER
);

CREATE TABLE MEDICAL_FIELD (
    MED_NO NUMBER NOT NULL PRIMARY KEY,
    JOB VARCHAR2(50) NOT NULL,
    MEDICAL_FIELD_ID VARCHAR2(20) NOT NULL
);

CREATE TABLE MEMBER (
    USER_NO NUMBER NOT NULL PRIMARY KEY,
    USER_ID VARCHAR2(20) NOT NULL UNIQUE,
    USER_PWD VARCHAR2(100) NOT NULL,
    USER_NAME VARCHAR2(20) NOT NULL,
    EMAIL VARCHAR2(50) NOT NULL,
    PHONE VARCHAR2(20) NOT NULL,
    BIRTHDAY DATE NOT NULL,
    GENDER CHAR(1) DEFAULT 'M' CHECK (GENDER IN ('M', 'F')),
    ADDRESS VARCHAR2(200),
    ENROLL_DATE DATE DEFAULT SYSDATE,
    STATUS CHAR(1) DEFAULT 'Y' CHECK (STATUS IN ('Y', 'N')),
    ISADMIN VARCHAR2(10) DEFAULT 'N',
    MED_KEY NUMBER,
    HOS_NO NUMBER,
    FOREIGN KEY (MED_KEY) REFERENCES MEDICAL_FIELD (MED_NO),
    FOREIGN KEY (HOS_NO) REFERENCES HOSPITAL_ACCOUNT (HOS_NO)
);

CREATE TABLE DOCTOR_REVIEW (
    REVIEW_NO NUMBER NOT NULL PRIMARY KEY,
    USER_NO NUMBER NOT NULL,
    REVIEW_TITLE VARCHAR2(200) NOT NULL,
    REVIEW_CONTENT VARCHAR2(2000) NOT NULL,
    REVIEW_CREATED_AT DATE DEFAULT SYSDATE,
    REVIEW_UPDATED_AT DATE DEFAULT SYSDATE,
    REVIEW_VIEWS NUMBER DEFAULT 0,
    REVIEW_RATING NUMBER,
    USER_ID2 VARCHAR2(20),
    FOREIGN KEY (USER_NO) REFERENCES MEMBER (USER_NO)
);

CREATE TABLE RESERVATION (
    RES_NO NUMBER NOT NULL PRIMARY KEY,
    USER_NO NUMBER NOT NULL,
    HOS_NO NUMBER NOT NULL,
    RES_DATE DATE DEFAULT SYSDATE,
    RES_TIME DATE NOT NULL,
    RES_CATEGORY VARCHAR2(20) NOT NULL,
    RES_CONTENT VARCHAR2(2000),
    FOREIGN KEY (USER_NO) REFERENCES MEMBER (USER_NO),
    FOREIGN KEY (HOS_NO) REFERENCES HOSPITAL_ACCOUNT (HOS_NO)
);

CREATE TABLE TREATMENT (
    TREATMENT_NO NUMBER NOT NULL PRIMARY KEY,
    RES_NO NUMBER NOT NULL,
    VACCINE_CATEGORY VARCHAR2(20),
    HEALTH_SELECT VARCHAR2(20),
    RES_SELECT VARCHAR2(20),
    FOREIGN KEY (RES_NO) REFERENCES RESERVATION (RES_NO)
);

CREATE TABLE BOARD (
    BOARD_NO NUMBER NOT NULL PRIMARY KEY,
    USER_NO NUMBER NOT NULL,
    TITLE VARCHAR2(200) NOT NULL,
    CONTENT VARCHAR2(2000) NOT NULL,
    ENROLL_DATE DATE DEFAULT SYSDATE,
    MODIFIED_DATE DATE DEFAULT SYSDATE,
    VIEWS NUMBER DEFAULT 0,
    BOARD_CATEGORY VARCHAR2(20),
    STATUS CHAR(1) DEFAULT 'Y' CHECK (STATUS IN ('Y', 'N')),
    FOREIGN KEY (USER_NO) REFERENCES MEMBER (USER_NO)
);

CREATE TABLE FILE_TABLE (
    FILE_NO NUMBER NOT NULL PRIMARY KEY,
    BOARD_NO NUMBER NOT NULL,
    USER_NO NUMBER NOT NULL,
    ORIGIN_NAME VARCHAR2(200),
    CHANGE_NAME VARCHAR2(200),
    FOREIGN KEY (BOARD_NO) REFERENCES BOARD (BOARD_NO),
    FOREIGN KEY (USER_NO) REFERENCES MEMBER (USER_NO)
);

CREATE TABLE COMMENTS (
    COMMENT_NO NUMBER NOT NULL PRIMARY KEY,
    BOARD_NO NUMBER NOT NULL,
    USER_NO NUMBER NOT NULL,
    CONTENT VARCHAR2(2000),
    CREATED_AT DATE DEFAULT SYSDATE,
    FOREIGN KEY (BOARD_NO) REFERENCES BOARD (BOARD_NO),
    FOREIGN KEY (USER_NO) REFERENCES MEMBER (USER_NO)
);

-- 트리거 설정
CREATE OR REPLACE TRIGGER trg_hospital_account_id
BEFORE INSERT ON HOSPITAL_ACCOUNT
FOR EACH ROW
BEGIN
    :NEW.HOS_NO := SEQ_HOS_NO.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER trg_reservation_id
BEFORE INSERT ON RESERVATION
FOR EACH ROW
BEGIN
    :NEW.RES_NO := SEQ_RES_NO.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER trg_member_id
BEFORE INSERT ON MEMBER
FOR EACH ROW
BEGIN
    :NEW.USER_NO := SEQ_USER_NO.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER trg_treatment_id
BEFORE INSERT ON TREATMENT
FOR EACH ROW
BEGIN
    :NEW.TREATMENT_NO := SEQ_TREATMENT_NO.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER trg_board_id
BEFORE INSERT ON BOARD
FOR EACH ROW
BEGIN
    :NEW.BOARD_NO := SEQ_BOARD_NO.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER trg_doctor_review_id
BEFORE INSERT ON DOCTOR_REVIEW
FOR EACH ROW
BEGIN
    :NEW.REVIEW_NO := SEQ_REVIEW_NO.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER trg_file_table_id
BEFORE INSERT ON FILE_TABLE
FOR EACH ROW
BEGIN
    :NEW.FILE_NO := SEQ_FILE_NO.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER trg_medical_field_id
BEFORE INSERT ON MEDICAL_FIELD
FOR EACH ROW
BEGIN
    :NEW.MED_NO := SEQ_MED_NO.NEXTVAL;
END;
/


INSERT INTO MEMBER (user_id, user_pwd, user_name, email, phone, birthday, address, gender) 
VALUES ('user01', 'pwd01', 'Alice', 'alice@example.com', '010-1234-5678', TO_DATE('1990-01-01', 'YYYY-MM-DD'), 'Seoul, Korea', 'F');

INSERT INTO MEMBER (user_id, user_pwd, user_name, email, phone, birthday, address, gender) 
VALUES ('user02', 'pwd02', 'Bob', 'bob@example.com', '010-2345-6789', TO_DATE('1992-02-02', 'YYYY-MM-DD'), 'Busan, Korea', 'M');

INSERT INTO MEMBER (user_id, user_pwd, user_name, email, phone, birthday, address, gender) 
VALUES ('user03', 'pwd03', 'Charlie', 'charlie@example.com', '010-3456-7890', TO_DATE('1985-03-03', 'YYYY-MM-DD'), 'Incheon, Korea', 'M');

INSERT INTO MEMBER (user_id, user_pwd, user_name, email, phone, birthday, address, gender) 
VALUES ('user04', 'pwd04', 'Diana', 'diana@example.com', '010-4567-8901', TO_DATE('1995-04-04', 'YYYY-MM-DD'), 'Daegu, Korea', 'F');

INSERT INTO MEMBER (user_id, user_pwd, user_name, email, phone, birthday, address, gender) 
VALUES ('user05', 'pwd05', 'Evan', 'evan@example.com', '010-5678-9012', TO_DATE('1988-05-05', 'YYYY-MM-DD'), 'Gwangju, Korea', 'M');
